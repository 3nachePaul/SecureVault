name: Security Pipeline (DevSecOps)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog Secrets Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  sast:
    name: SAST - Static Code Analysis
    runs-on: ubuntu-latest
    needs: secrets-scan
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      
      - name: Bandit Security Scan
        run: |
          pip install bandit[toml]
          bandit -r backend/ -f json -o bandit-report.json || true
          bandit -r backend/ -f screen
      
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=securevault
            -Dsonar.organization=your-org
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=backend/
            -Dsonar.tests=backend/tests/

  sca:
    name: SCA - Dependency Scanning
    runs-on: ubuntu-latest
    needs: secrets-scan
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Safety Check - Python Dependencies
        run: |
          pip install safety
          safety check --file=backend/requirements.txt --json > safety-report.json || true
          safety check --file=backend/requirements.txt
        continue-on-error: true
      
      - name: Snyk Dependency Scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/requirements.txt
      
      - name: OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'SecureVault'
          path: '.'
          format: 'JSON'
          args: >
            --enableRetired
            --enableExperimental
      
      - name: Upload Dependency-Check Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  iac-security:
    name: IaC Security Scanning
    runs-on: ubuntu-latest
    needs: secrets-scan
    steps:
      - uses: actions/checkout@v4
      
      - name: Checkov IaC Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/
          framework: terraform
          output_format: json
          download_external_modules: true
          quiet: false
          soft_fail: true
      
      - name: TFSec Terraform Security Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: infrastructure/
          format: json
          soft_fail: true

  build-and-test:
    name: Build & Unit Tests
    runs-on: ubuntu-latest
    needs: [sast, sca]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run Security Control Tests
        run: |
          cd backend
          pytest tests/test_security_controls.py -v --cov=. --cov-report=xml --cov-report=html
      
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: Build Docker Image
        run: |
          docker build -t securevault-backend:${{ github.sha }} backend/
      
      - name: Scan Docker Image for Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: securevault-backend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker Images
        run: |
          docker build -t securevault-backend:scan backend/
      
      - name: Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: securevault-backend:scan
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      
      - name: Grype Container Scan
        uses: anchore/scan-action@v3
        with:
          image: securevault-backend:scan
          fail-build: true
          severity-cutoff: high

  dast:
    name: DAST - Dynamic Security Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Start Application Stack
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to be ready
      
      - name: Wait for Application
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
      
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:8000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
      
      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:8000'
          rules_file_name: '.zap/rules.tsv'
          allow_issue_writing: false
      
      - name: Shutdown Stack
        run: docker-compose down

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    needs: [sast, sca, iac-security]
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate Security Headers
        run: |
          docker-compose up -d backend
          sleep 10
          
          # Check required security headers
          curl -I http://localhost:8000 | grep "X-Content-Type-Options: nosniff" || exit 1
          curl -I http://localhost:8000 | grep "X-Frame-Options: DENY" || exit 1
          curl -I http://localhost:8000 | grep "Strict-Transport-Security" || exit 1
          curl -I http://localhost:8000 | grep "Content-Security-Policy" || exit 1
          
          docker-compose down
      
      - name: Validate Encryption Configuration
        run: |
          cd backend
          python -c "
          from main import EncryptionService
          service = EncryptionService()
          test_data = b'test'
          encrypted = service.encrypt_document(test_data, {'test': 'context'})
          assert encrypted['algorithm'] == 'AES-256-GCM', 'Wrong encryption algorithm'
          print('✓ Encryption validation passed')
          "
      
      - name: Validate JWT Configuration
        run: |
          cd backend
          python -c "
          from main import JWTValidator
          validator = JWTValidator()
          assert validator.algorithm == 'HS256', 'Incorrect JWT algorithm'
          assert validator.issuer == 'securevault.io', 'Incorrect issuer'
          print('✓ JWT validation passed')
          "

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast, sca, dast, container-security, compliance-check]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate Security Summary
        run: |
          cat << EOF > security-summary.md
          # Security Scan Summary - $(date)
          
          ## Pipeline Status
          - SAST: ${{ needs.sast.result }}
          - SCA: ${{ needs.sca.result }}
          - IaC Security: ${{ needs.iac-security.result }}
          - Container Security: ${{ needs.container-security.result }}
          - DAST: ${{ needs.dast.result }}
          - Compliance: ${{ needs.compliance-check.result }}
          
          ## Security Controls Verified
          - ✓ OAuth 2.0 + PKCE Authentication
          - ✓ AES-256-GCM Encryption
          - ✓ Security Headers (CSP, HSTS, X-Frame-Options)
          - ✓ Audit Logging (ISO 27001 A.8.15)
          - ✓ Brute Force Detection
          - ✓ Dependency Vulnerability Scanning
          - ✓ Container Image Scanning
          
          ## Compliance Status
          - ISO 27001: Controls tested and validated
          - SOC 2: Trust Services Criteria verified
          
          ## Next Steps
          - Review any findings from security scans
          - Update dependencies if vulnerabilities found
          - Verify all security controls pass automated tests
          EOF
          
          cat security-summary.md
      
      - name: Comment PR with Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
      
      - name: Upload Security Summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, compliance-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.securevault.io
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: securevault-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG backend/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster securevault-staging \
            --service securevault-backend \
            --force-new-deployment

  post-deploy-verification:
    name: Post-Deploy Security Checks
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: SSL/TLS Configuration Check
        run: |
          curl -I https://staging.securevault.io | grep "strict-transport-security"
      
      - name: Security Headers Validation
        run: |
          curl -I https://staging.securevault.io | grep "x-content-type-options"
          curl -I https://staging.securevault.io | grep "x-frame-options"
      
      - name: Health Check
        run: |
          response=$(curl -s https://staging.securevault.io/health)
          echo $response | jq -e '.status == "healthy"'