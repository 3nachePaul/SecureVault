input {
  http {
    port => 8080
    codec => json
    type => "application_log"
  }
  
  tcp {
    port => 5000
    codec => json_lines
    type => "container_log"
  }
  
  file {
    path => "/var/log/securevault/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    type => "file_log"
  }
}

filter {
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }
  
  if [user_id] {
    mutate {
      add_field => { "user_identifier" => "%{user_id}" }
    }
  }
  
  if [ip_address] and [ip_address] != "unknown" {
    geoip {
      source => "ip_address"
      target => "geo"
      fields => ["city_name", "country_name", "country_code2", "location"]
    }
  }
  
  if [ip_address] and [ip_address] != "127.0.0.1" and [ip_address] != "localhost" {
    mutate {
      add_field => { "threat_check_needed" => "true" }
    }
  }
  
  if [severity] == "CRITICAL" or [severity] == "HIGH" {
    mutate {
      add_field => { "alert_priority" => "high" }
      add_tag => ["requires_immediate_attention"]
    }
  } else if [severity] == "WARNING" {
    mutate {
      add_field => { "alert_priority" => "medium" }
      add_tag => ["requires_review"]
    }
  }
  
  if [event_type] == "LOGIN_FAILURE" {
    mutate {
      add_tag => ["authentication_failure"]
    }
    
    aggregate {
      task_id => "%{ip_address}"
      code => "
        map['failed_attempts'] ||= 0
        map['failed_attempts'] += 1
        event.set('total_failures', map['failed_attempts'])
      "
      timeout => 300
    }
  }
  
  if [event_type] == "BRUTE_FORCE_ATTACK" {
    mutate {
      add_tag => ["security_incident", "brute_force"]
    }
    
    mutate {
      add_field => { 
        "incident_type" => "brute_force"
        "requires_response" => "true"
      }
    }
  }
  
  if [event_type] == "DOCUMENT_ACCESS" or [event_type] == "DOCUMENT_DOWNLOAD" {
    mutate {
      add_tag => ["data_access"]
    }
    
    aggregate {
      task_id => "%{user_id}"
      code => "
        map['access_count'] ||= 0
        map['access_count'] += 1
        event.set('user_access_count', map['access_count'])
      "
      timeout => 3600
    }
  }
  
  if [event_type] in ["LOGIN_SUCCESS", "LOGIN_FAILURE", "PERMISSION_CHANGE", "CONFIG_CHANGE"] {
    mutate {
      add_tag => ["iso27001_a_8_15", "soc2_cc7_2", "audit_trail"]
    }
  }
  
  }
  }
  
  if [details] =~ /password|secret|token|key/ {
  
  # Add processing metadata
  mutate {
    add_field => {
      "log_processor" => "logstash"
      "processing_timestamp" => "%{@timestamp}"
      "pipeline_version" => "1.0"
    }
  }
  
  # Convert string fields to proper types
  mutate {
    convert => {
      "risk_score" => "integer"
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "securevault-logs-%{+YYYY.MM.dd}"
    document_id => "%{log_id}"
    
    action => "create"
  }
  
  if "security_incident" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "securevault-security-alerts-%{+YYYY.MM.dd}"
      document_id => "%{log_id}"
    }
  }
  
  if "audit_trail" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "securevault-audit-%{+YYYY.MM}"
      document_id => "%{log_id}"
    }
  }
  
  stdout {
    codec => rubydebug {
      metadata => true
    }
  }
}

metrics {
  meter => "events"
  add_tag => "metric"
  flush_interval => 30
}